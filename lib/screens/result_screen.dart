import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:intl/intl.dart';
import '../services/ai_service.dart';
import '../services/storage_service.dart';

class ResultScreen extends StatefulWidget {
  const ResultScreen({super.key});

  @override
  State<ResultScreen> createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen> {
  bool _isSaving = false;
  bool _isGeneratingReport = false;
  late final StorageService _storageService;

  @override
  void initState() {
    super.initState();
    _storageService = StorageService();
    _initStorageService();
  }

  Future<void> _initStorageService() async {
    await _storageService.init();
    _saveToHistory();
  }

  Future<void> _saveToHistory() async {
    final aiService = Provider.of<AIService>(context, listen: false);
    final result = aiService.lastResult;
    final image = aiService.lastImage;
    
    if (result == null || image == null || !mounted) return;
    
    setState(() => _isSaving = true);
    
    try {
      // Save image to app directory
      final savedImagePath = await _storageService.saveImage(image);
      
      // Create scan result
      final scanResult = ScanResult(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        prediction: result.prediction,
        probability: result.probability,
        graphData: result.graphData,
        imagePath: savedImagePath,
        timestamp: result.timestamp ?? DateTime.now(),
      );
      
      // Save to history
      await _storageService.saveScanResult(scanResult);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to save to history: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
      }
    }
  }

  Future<void> _generateAndShareReport() async {
    final aiService = Provider.of<AIService>(context, listen: false);
    final result = aiService.lastResult;
    final image = aiService.lastImage;
    
    if (result == null || image == null || !mounted) return;
    
    setState(() => _isGeneratingReport = true);
    
    try {
      // Load image bytes first
      final imageBytes = await image.readAsBytes();
      
      final pdf = pw.Document();
      
      // Add report header
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Header(
                  level: 0,
                  child: pw.Text('Adhesion Detection Report', 
                    style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)
                  ),
                ),
                pw.SizedBox(height: 20),
                pw.Text('Date: ${DateFormat('MMM dd, yyyy - HH:mm').format(result.timestamp ?? DateTime.now())}'),
                pw.SizedBox(height: 10),
                pw.Text('Result: ${result.prediction}', 
                  style: pw.TextStyle(
                    fontSize: 18, 
                    fontWeight: pw.FontWeight.bold,
                    color: result.prediction == 'Yes' ? 
                      PdfColors.red : PdfColors.green
                  )
                ),
                pw.SizedBox(height: 10),
                pw.Text('Probability: ${(result.probability * 100).toStringAsFixed(1)}%'),
                pw.SizedBox(height: 20),
                pw.Text('Scan Image', style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 10),
                pw.Image(
                  pw.MemoryImage(imageBytes),
                  height: 300,
                  fit: pw.BoxFit.contain
                ),
                pw.SizedBox(height: 20),
                pw.Text('Notes:', style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 10),
                pw.Container(
                  height: 100,
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(color: PdfColors.grey)
                  ),
                ),
                pw.SizedBox(height: 20),
                pw.Text('This report was generated by AdhesioSense App. For medical professional use only.', 
                  style: pw.TextStyle(fontSize: 10, color: PdfColors.grey)
                ),
              ],
            );
          }
        )
      );
      
      // Save PDF to temporary file
      final output = await getTemporaryDirectory();
      final file = File('${output.path}/adhesion_report_${DateFormat('yyyyMMdd_HHmmss').format(DateTime.now())}.pdf');
      await file.writeAsBytes(await pdf.save());
      
      // Share the PDF
      await Share.shareXFiles(
        [XFile(file.path)],
        subject: 'Adhesion Detection Report',
        text: 'Adhesion Detection Report - ${DateFormat('MMM dd, yyyy').format(result.timestamp ?? DateTime.now())}',
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate report: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isGeneratingReport = false);
      }
    }
  }

  Widget _buildConfidenceChart(List<double> graphData) {
    final noAdhesionPercent = (graphData[0] * 100).toStringAsFixed(1);
    final adhesionPercent = (graphData[1] * 100).toStringAsFixed(1);

    return SizedBox(
      height: 200,
      child: BarChart(
        BarChartData(
          alignment: BarChartAlignment.spaceAround,
          maxY: 1.0,
          barTouchData: BarTouchData(enabled: false),
          titlesData: FlTitlesData(
            show: true,
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                getTitlesWidget: (value, meta) {
                  if (value == 0) {
                    return Text('No Adhesion\n$noAdhesionPercent%', 
                        textAlign: TextAlign.center, style: const TextStyle(fontSize: 10));
                  } else if (value == 1) {
                    return Text('Adhesion\n$adhesionPercent%', 
                        textAlign: TextAlign.center, style: const TextStyle(fontSize: 10));
                  }
                  return const Text('');
                },
              ),
            ),
            leftTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
            rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
            topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
          ),
          gridData: const FlGridData(show: false),
          borderData: FlBorderData(show: false),
          barGroups: [
            BarChartGroupData(
              x: 0,
              barRods: [
                BarChartRodData(
                  toY: graphData[0],
                  color: Colors.green,
                  width: 30,
                  borderRadius: BorderRadius.circular(4),
                ),
              ],
            ),
            BarChartGroupData(
              x: 1,
              barRods: [
                BarChartRodData(
                  toY: graphData[1],
                  color: Colors.red,
                  width: 30,
                  borderRadius: BorderRadius.circular(4),
                ),
              ],
            ),
          ],
        ),
        swapAnimationDuration: const Duration(milliseconds: 500),
      ),
    );
  }

  Widget _buildResultCard(PredictionResult result) {
    final isAdhesion = (result.prediction == 'Yes');
    final probabilityPercent = (result.probability * 100).toStringAsFixed(1);

    return Card(
      elevation: 4,
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            // Result Icon
            Icon(
              isAdhesion ? Icons.warning : Icons.check_circle,
              size: 64,
              color: isAdhesion ? Colors.orange : Colors.green,
            ),
            const SizedBox(height: 16),
            
            // Prediction Text
            Text(
              isAdhesion ? 'ADHESION DETECTED' : 'NO ADHESION',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: isAdhesion ? Colors.orange : Colors.green,
              ),
            ),
            const SizedBox(height: 8),
            
            // Probability
            Text(
              'Confidence: $probabilityPercent%',
              style: const TextStyle(fontSize: 18, color: Colors.grey),
            ),
            const SizedBox(height: 24),
            
            // Confidence Chart
            _buildConfidenceChart(result.graphData),
            const SizedBox(height: 24),
            
            // Recommendations
            if (isAdhesion)
              const Text(
                'Recommendation: Consult with surgical team for further evaluation.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.orange, fontWeight: FontWeight.bold),
              )
            else
              const Text(
                'No significant adhesion detected. Continue monitoring.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.green),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildImagePreview(File? imageFile) {
    if (imageFile == null) {
      return Container(
        width: 150,
        height: 150,
        decoration: BoxDecoration(
          color: Colors.grey[200],
          borderRadius: BorderRadius.circular(12),
        ),
        child: const Icon(Icons.image, size: 48, color: Colors.grey),
      );
    }

    return Container(
      width: 150,
      height: 150,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Image.file(imageFile, fit: BoxFit.cover),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final aiService = Provider.of<AIService>(context);
    final result = aiService.lastResult;
    final image = aiService.lastImage;

    if (result == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Results')),
        body: const Center(child: Text('No analysis results available')),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Analysis Results'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              aiService.clearResults();
              Navigator.pop(context);
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            // Image Preview
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  const Text(
                    'Scanned Image',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  _buildImagePreview(image),
                ],
              ),
            ),
            
            // Results
            _buildResultCard(result),
            
            // Error message if any
            if (result.error != null)
              Padding(
                padding: const EdgeInsets.all(16),
                child: Text(
                  'Error: ${result.error}',
                  style: const TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
              ),
            
            // Action Buttons
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  ElevatedButton.icon(
                    icon: _isGeneratingReport 
                        ? const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2))
                        : const Icon(Icons.share),
                    label: Text(_isGeneratingReport ? 'Generating...' : 'Share Report'),
                    onPressed: _isGeneratingReport ? null : _generateAndShareReport,
                  ),
                  
                  ElevatedButton.icon(
                    icon: const Icon(Icons.history),
                    label: const Text('View History'),
                    onPressed: () {
                      Navigator.pushNamed(context, '/history');
                    },
                  ),
                ],
              ),
            ),
            
            // Saving indicator
            if (_isSaving)
              const Padding(
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                child: LinearProgressIndicator(),
              ),
            
            const SizedBox(height: 20),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          aiService.clearResults();
          Navigator.pop(context);
        },
        child: const Icon(Icons.home),
        tooltip: 'Back to Home',
      ),
    );
  }
}